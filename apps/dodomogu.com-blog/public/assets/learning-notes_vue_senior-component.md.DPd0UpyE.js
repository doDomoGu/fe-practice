import{_ as i,c as s,o as a,a2 as t}from"./chunks/framework.DOwwFb84.js";const c=JSON.parse('{"title":"组件高级用法","description":"","frontmatter":{},"headers":[],"relativePath":"learning-notes/vue/senior-component.md","filePath":"learning-notes/vue/senior-component.md"}'),l={name:"learning-notes/vue/senior-component.md"},n=t(`<h1 id="组件高级用法" tabindex="-1">组件高级用法 <a class="header-anchor" href="#组件高级用法" aria-label="Permalink to &quot;组件高级用法&quot;">​</a></h1><h2 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;show&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;****&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ variables }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* vue 实例 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">myComp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">myComp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> :is=&quot;variables&quot;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> :key=&quot;variables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p>如何优化组件的加载<br> 优化加载<br> 控制引用 =&gt; 动态组件</p></li><li><p>动态组件的优势<br> 动态占位符 + 运行时切换 =&gt; 操作时，实时控制部分模块实例的渲染</p></li><li><p>动态组件的生命周期<br> 每一次切换都是一个完整的生命周期 重新渲染 直到销毁</p></li><li><p>实现组件状态的保留 | 反销毁<br><code>&lt;keep-alive&gt;</code><br> 对当前组件实例指定位置的缓存 =&gt; 提升渲染性能</p></li><li><p>keep-alive配置 include exclude max<br> LRU缓存算法</p></li></ul><h2 id="内置高级组件" tabindex="-1">内置高级组件 <a class="header-anchor" href="#内置高级组件" aria-label="Permalink to &quot;内置高级组件&quot;">​</a></h2><ul><li><p>keep-alive 缓存组件实例， 保留在内存中</p></li><li><p>teleport 传送门<br> 将包裹的组件的内容渲染到任意dom节点上 =&gt; 实现组件的代码与实际渲染位置的解耦</p></li><li><p>transition 过渡态</p></li><li><p>suspense 等待异步加载</p></li></ul><h2 id="自定义方式实现内部通用能力-plugins" tabindex="-1">自定义方式实现内部通用能力 =&gt; plugins <a class="header-anchor" href="#自定义方式实现内部通用能力-plugins" aria-label="Permalink to &quot;自定义方式实现内部通用能力 =&gt; plugins&quot;">​</a></h2>`,7),e=[n];function h(p,k,r,E,d,o){return a(),s("div",null,e)}const y=i(l,[["render",h]]);export{c as __pageData,y as default};
