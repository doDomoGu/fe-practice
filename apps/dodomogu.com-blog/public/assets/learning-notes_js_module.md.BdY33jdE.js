import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.DOwwFb84.js";const g=JSON.parse('{"title":"JS 模块化","description":"","frontmatter":{},"headers":[],"relativePath":"learning-notes/js/module.md","filePath":"learning-notes/js/module.md"}'),l={name:"learning-notes/js/module.md"},n=t(`<h1 id="js-模块化" tabindex="-1">JS 模块化 <a class="header-anchor" href="#js-模块化" aria-label="Permalink to &quot;JS 模块化&quot;">​</a></h1><h2 id="历史背景" tabindex="-1">历史背景 <a class="header-anchor" href="#历史背景" aria-label="Permalink to &quot;历史背景&quot;">​</a></h2><p>JavaScript 语言本身的定位： 作为简单页面设计的支撑 -- 页面的动画效果 + 表单的提交等<br> 早期并无模块化或者命名空间的基础<br> 随着页面效果复杂度的日益增长，代码模块化的需求迫在眉睫</p><h2 id="幼年期-无模块化" tabindex="-1">幼年期：无模块化 <a class="header-anchor" href="#幼年期-无模块化" aria-label="Permalink to &quot;幼年期：无模块化&quot;">​</a></h2><ol><li>开始需要页面加载不同的 js 库：动画库、表单库、格式化工具</li><li>多种 js 文件被分在不同的文件中</li><li>不同的文件又被同一个模版所引用</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// index.html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tools.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;map.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 主</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,6),h=[n];function e(p,k,r,E,d,o){return a(),i("div",null,h)}const y=s(l,[["render",e]]);export{g as __pageData,y as default};
