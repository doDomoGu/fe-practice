import{_ as e,c as o,o as d,a2 as c}from"./chunks/framework.DOwwFb84.js";const i="/assets/box_layout-1.DDmsz2iG.jpg",k=JSON.parse('{"title":"CSS 盒模型与布局","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-system/css/box_layout.md","filePath":"knowledge-system/css/box_layout.md"}'),l={name:"knowledge-system/css/box_layout.md"},a=c('<h1 id="css-盒模型与布局" tabindex="-1">CSS 盒模型与布局 <a class="header-anchor" href="#css-盒模型与布局" aria-label="Permalink to &quot;CSS 盒模型与布局&quot;">​</a></h1><ul><li>本文系统梳理<strong>CSS</strong>盒模型及盒模型布局</li><li>详细讲解内容盒模型(<code>content-box</code>)与边框盒模型(<code>border-box</code>)异同</li><li>系统讲解<code>BFC</code>创建条件及应用</li><li>系统讲解<code>flex</code>布局，详解其相关属性值</li><li>简单总结<code>grid</code>布局及案例，另外通过案例快速了解掌握<code>table</code>布局。</li></ul><h2 id="什么是盒模型" tabindex="-1">什么是盒模型？ <a class="header-anchor" href="#什么是盒模型" aria-label="Permalink to &quot;什么是盒模型？&quot;">​</a></h2><ul><li>在页面中，每个元素被显示为一个矩形的方框，这就是盒子(<code>box</code>)。</li><li>一个盒子(<code>box</code>)从内到外由内容(<code>content</code>)、内边距(<code>padding</code>)、边框(<code>border</code>)和外边距(<code>margin</code>)组成，这个组成的方式就是盒模型。</li></ul><p>下面是 chrome 浏览器调试工具里展示的布局图，它很直观地展示了一个页面元素的盒模型组成结构。<br><img src="'+i+'" alt="chrome浏览器调试框里展示的布局图"></p><h2 id="盒模型类型" tabindex="-1">盒模型类型 <a class="header-anchor" href="#盒模型类型" aria-label="Permalink to &quot;盒模型类型&quot;">​</a></h2><p><code>CSS</code>属性<code>box-sizing</code>，它定义了如何计算一个元素盒模型的总宽度和总高度。<br> 它有两个值：<code>content-box</code>(内容盒模型)和<code>border-box</code>(边框盒模型)，默认值是 <code>content-box</code>(内容盒模型) 。<br> 主要区别是是否需要加上内边距(<code>padding</code>)和边框(<code>border</code>)。</p><blockquote><p><code>border-box</code>(边框盒模型)也叫做怪异盒模型，起源于早期 IE 浏览器的 bug。</p></blockquote><h3 id="内容盒模型" tabindex="-1">内容盒模型 <a class="header-anchor" href="#内容盒模型" aria-label="Permalink to &quot;内容盒模型&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">content-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>该样式元素实际内容区域(<code>content</code>)的宽度<code>width</code>/高度<code>height</code> = 我们设置在这个元素上的宽度<code>width</code>/高度<code>height</code></li><li>该样式元素实际盒模型的总宽度和高度 = <code>width</code> / <code>height</code> + 对应横纵轴上的 ( 内边距<code>padding</code> + 边框<code>border</code> + 外边距<code>margin</code>)</li></ul><h3 id="边框盒模型" tabindex="-1">边框盒模型 <a class="header-anchor" href="#边框盒模型" aria-label="Permalink to &quot;边框盒模型&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; // 怪异盒模型</span></span></code></pre></div><ul><li>该样式元素实际内容区域(<code>content</code>)的宽度<code>width</code>/高度<code>height</code> + 对应横纵轴上的 ( 内边距<code>padding</code> + 边框<code>border</code>) = 我们设置在这个元素上的宽度<code>width</code>/高度<code>height</code></li><li>该样式元素实际盒模型的总宽度和高度 = <code>width</code> / <code>height</code> + 对应横纵轴上的 ( 外边距<code>margin</code>)</li></ul><h2 id="元素类型-布局" tabindex="-1">元素类型 &amp; 布局 <a class="header-anchor" href="#元素类型-布局" aria-label="Permalink to &quot;元素类型 &amp; 布局&quot;">​</a></h2><p><code>CSS</code>属性<code>display</code>，用来设置元素是否被视为块级(<code>block</code>)元素或者内联(<code>inline</code>)元素以及用于子元素的布局(<code>layout</code>)，例如流式布局、网格布局(<code>grid</code>)、弹性布局(<code>flex</code>)以及传统的表格布局(<code>table</code>)等。</p><h3 id="块级元素" tabindex="-1">块级元素 <a class="header-anchor" href="#块级元素" aria-label="Permalink to &quot;块级元素&quot;">​</a></h3><p><code>display</code>的值为<code>block</code>、<code>table</code>或者<code>list-item</code>的元素是块级元素(<strong>block level element</strong>)，它们会生成块级盒子(<strong>block level box</strong>)并且参加块级格式化上下文(<strong>Block Formatting Contex</strong> 简称<code>BFC</code>)。</p><p>块级元素行为如下：</p><ul><li>元素会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着元素会和父容器一样宽，每个元素都会换行。</li><li>元素上设置的宽度<code>width</code>和高度<code>height</code>会发挥作用。</li><li>内边距<code>padding</code>、边框<code>border</code>和外边距<code>margin</code>会将其他元素从当前盒子周围&quot;<strong>推开</strong>&quot;</li></ul><h3 id="内联元素" tabindex="-1">内联元素 <a class="header-anchor" href="#内联元素" aria-label="Permalink to &quot;内联元素&quot;">​</a></h3><p><code>display</code>的值为<code>inline</code></p><p>内联元素行为如下：</p><ul><li>元素不会产生换行。</li><li>元素上设置的宽度<code>width</code>和高度<code>height</code>将不起作用。</li><li>垂直方向的内边距<code>padding</code>、边框<code>border</code>和外边距<code>margin</code>会被应用，但是不会把其他处于 <code>inline</code>状态的元素推开。</li><li>水平方向的内边距<code>padding</code>、边框<code>border</code>和外边距<code>margin</code>会被应用，且会把其他处于<code>inline</code>状态的元素推开。</li></ul><h3 id="内联块级元素" tabindex="-1">内联块级元素 <a class="header-anchor" href="#内联块级元素" aria-label="Permalink to &quot;内联块级元素&quot;">​</a></h3><p><code>display</code>有一个特殊的值<code>inline-block</code>，它在内联<code>inline</code>和块<code>block</code>之间提供了一个中间状态。（呈现出对外<code>inline</code>对内<code>block</code>的特性）<br> 这对于以下情况非常有用: 您不希望一个元素切换到新行，但希望它可以设定宽度和高度，并避免上面看到的重叠。</p><p>它的行为如下：</p><ul><li>元素上设置的宽度<code>width</code>和高度<code>height</code>会发挥作用。</li><li>内边距<code>padding</code>、边框<code>border</code>和外边距<code>margin</code>会推开其他元素。</li></ul><h3 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h3><p><code>BFC</code>（<strong>Block Formatting Context</strong>）块级格式化上下文，是 Web 页面中盒模型布局的 CSS 渲染模式，指一个独立的渲染区域或者说是一个隔离的独立容器。</p><p>BFC 的创造条件</p><ul><li>根元素: <code>&lt;html&gt;</code></li><li>浮动元素: 元素的<code>float</code>属性值不是<code>none</code></li><li>绝对定位元素: 元素的<code>position</code>属性值为<code>absolute</code>或者<code>fixed</code></li><li>行内块元素: 元素的<code>display</code>属性值为<code>inline-block</code></li><li>表格中的单元格: 元素的<code>display</code>属性值为<code>table-cell</code>，HTML 标签中表格单元格<code>&lt;td&gt;</code>,<code>&lt;th&gt;</code>默认为该值</li><li>表格标题: 元素的<code>display</code>属性值为<code>table-caption</code>，HTML 标签中表格标题<code>&lt;caption&gt;</code>默认为该值</li><li>匿名表格单元格元素: 元素的<code>display</code>属性值为<code>table</code>、<code>table-row-group</code>、<code>table-row</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是 HTML 标签 <code>table</code>、<code>tbody</code>、<code>tr</code>、<code>thead</code>、<code>tfoot</code> 的默认属性）或 <code>inline-table</code></li><li><code>overflow</code> 不为 <code>visible</code> 的块级元素</li><li><code>display</code> 值为 <code>flow-root</code> 的元素</li><li><code>contain</code> 值为 <code>layout</code>、<code>content</code> 或 <code>paint</code> 的元素</li><li>弹性布局的直接子元素: <code>display</code>属性值为<code>flex</code>或<code>inline-flex</code>元素的直接子元素</li><li>网格布局的直接子元素: <code>display</code>属性值为<code>grid</code>或<code>inline-grid</code>元素的直接子元素</li><li>多列容器: 元素的<code>column-count</code>或<code>column-widt</code>不为<code>auto</code></li><li><code>column-span</code>为<code>all</code>的元素始终会创建一个新的<code>BFC</code>，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。</li></ul>',32),t=[a];function s(n,r,h,p,b,g){return d(),o("div",null,t)}const m=e(l,[["render",s]]);export{k as __pageData,m as default};
